name: macOS Build & Package
on:
  push: { branches: [main] }
  pull_request:
  workflow_dispatch:
  release: { types: [created] }

jobs:
  mac:
    runs-on: macos-14       # Apple-Silicon runner
    env:
     BUILD_TYPE: Release
     VCPKG_BINARY_SOURCES: "clear;files,${{ github.workspace }}/vcpkg-cache,readwrite"
     VCPKG_ROOT: ${{ github.workspace }}/vcpkg     # <- add this
     CMAKE_GENERATOR: Ninja
     VCPKG_FORCE_NINJA: 1

    steps:
    # 1. Checkout
    - uses: actions/checkout@v4

    # 2. Cache vcpkg binaries
    - name: Cache vcpkg binaries
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg-cache
        key: vcpkg-bins-macos-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: vcpkg-bins-macos-

    # 3. Cache our own build directory
    - name: Cache CMake build directory
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/build
        key: cmake-build-macos-${{ hashFiles('**/CMakeLists.txt', 'src/**', 'include/**') }}
        restore-keys: cmake-build-macos-

    # 4. Homebrew deps (add ninja, drop explicit make/gmake)
    - name: Install build tools via Homebrew
      run: brew install ninja autoconf automake libtool pkg-config bison

    # 5. vcpkg â€“ bump to a recent commit that has ICU patches
    - name: Run vcpkg
      uses: lukka/run-vcpkg@v11
      with:
         vcpkgDirectory: vcpkg
         vcpkgGitCommitId: 4f719951ca65909c91d16afdced2805c3ea2d5f7

    # 6. Qt (unchanged, still via Homebrew)
    - name: Install Qt via Homebrew
      run: brew install qt@6

    # 7. Configure & build with Ninja
    - name: Configure
      run: |
        cmake -B build -S . \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_PREFIX_PATH=$(brew --prefix qt@6)

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }}

    # 8. Bundle, sign, package  (unchanged)
    - name: macdeployqt (plus ad-hoc codesign)
      run: |
        macdeployqt build/RoboticsSoftware.app -always-overwrite -verbose=2
        codesign --force --deep --sign - build/RoboticsSoftware.app

    - name: Create DMG
      run: packaging/create-dmg.sh

    - uses: actions/upload-artifact@v4
      with:
        name: KRStudio-mac
        path: KRStudio-mac.dmg
