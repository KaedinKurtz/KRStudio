name: macOS Build & Package

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  mac:
    runs-on: macos-14 # Apple-Silicon runner

    # ──────────────── global env ────────────────
    env:
      BUILD_TYPE: Release
      # Use the same simple file-based cache as the Windows workflow for consistency and reliability.
      VCPKG_BINARY_SOURCES: "clear;files,${{ github.workspace }}/vcpkg-cache,readwrite"
      # Explicitly point to the GNU make installed by Homebrew. This is critical for vcpkg's configure scripts.
      MAKE: /opt/homebrew/bin/gmake

    steps:
      # 1. Checkout
      - uses: actions/checkout@v4

      # 2. Cache vcpkg binaries
      # This single step now handles the compiled dependency cache.
      - name: Cache vcpkg binaries
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg-cache
          key: vcpkg-bins-macos-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: vcpkg-bins-macos-

      # 3. Cache the project's own build directory
      # Added this step for faster subsequent builds of your own code.
      - name: Cache CMake build directory
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/build
          key: cmake-build-macos-${{ hashFiles('**/CMakeLists.txt', 'src/**', 'include/**') }}
          restore-keys: cmake-build-macos-

      # 4. Dependencies
      # Install the full set of build tools required by vcpkg packages, including make and bison.
      - name: Install build tools via Homebrew
        run: brew install autoconf automake libtool pkg-config make bison

      - name: Run vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ github.workspace }}/vcpkg
          vcpkgGitCommitId: c6f09fc73ebfbfddd769f8fac9f33f95304c77e5

      # Replaced the failing install-qt-action with a more reliable Homebrew installation.
      - name: Install Qt via Homebrew
        run: brew install qt@6

      # 5. Configure & build
      - name: Configure
        run: |
          cmake -B build -S . \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
                -DCMAKE_PREFIX_PATH=$(brew --prefix qt@6)

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      # 6. Bundle & ad-hoc sign
      - name: macdeployqt (plus ad-hoc codesign)
        run: |
          # Homebrew adds Qt tools to the PATH, so macdeployqt can be called directly.
          macdeployqt build/RoboticsSoftware.app -always-overwrite -verbose=2
          # ad-hoc sign so Gatekeeper is satisfied when the DMG is downloaded
          codesign --force --deep --sign - build/RoboticsSoftware.app

      # 7. Create DMG & upload
      - name: Create DMG
        run: packaging/create-dmg.sh

      - uses: actions/upload-artifact@v4
        with:
          name: KRStudio-mac
          path: KRStudio-mac.dmg
