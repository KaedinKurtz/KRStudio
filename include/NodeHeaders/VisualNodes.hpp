#pragma once

#include "Node.hpp"
#include "NodeFactory.hpp"
#include <glm/glm.hpp>
#include <string>
#include <vector>
#include <functional>
#include <deque>

namespace NodeLibrary {

    // --- Data Structures ---

    /** @brief A single rule for the ConditionalLightNode. */
    struct LightCondition {
        // A function that takes the input and returns true if the condition is met.
        std::function<bool(float)> condition;
        glm::vec4 color;
    };

    /** @brief A log entry generated by a DataMonitorNode. */
    struct ErrorLogEntry {
        double timestamp;
        std::string sourceNodeID;
        std::string message;
        enum class Severity { Info, Warning, Error, Critical } severity;
        // In a real system, this would also contain a snapshot of dependencies.
    };


    // --- Visualization Nodes ---

    /**
     * @brief A configurable "stoplight" that changes color based on input.
     * The actual rendering of the light is handled by the IDE's UI.
     */
    class ConditionalLightNode : public Node {
    public:
        // This vector of rules would be configured in the IDE's property editor.
        std::vector<LightCondition> conditions;
        glm::vec4 defaultColor = { 0.2f, 0.2f, 0.2f, 1.0f }; // Default gray/off color

        ConditionalLightNode();
        void compute() override;
    };

    /**
     * @brief A node that visualizes a value on a dial or gauge.
     */
    class DialGaugeNode : public Node {
    public:
        DialGaugeNode();
        void compute() override;
    };

    /**
     * @brief A node that plots a value over time.
     */
    class ValuePlotterNode : public Node {
    public:
        ValuePlotterNode();
        void compute() override;
    private:
        std::deque<std::pair<float, float>> m_history; // Stores (time, value)
        const size_t MAX_HISTORY = 200;
    };


    // --- Monitoring & Logging Nodes ---

    /**
     * @brief A passthrough node that logs errors based on a configurable condition.
     */
    class DataMonitorNode : public Node {
    public:
        // Configurable properties for the monitor instance.
        std::function<bool(float)> errorCondition;
        std::string errorMessage = "Value out of bounds!";
        ErrorLogEntry::Severity errorSeverity = ErrorLogEntry::Severity::Error;

        DataMonitorNode();
        void compute() override;
    };

} // namespace NodeLibrary