#include "StaticToolbar.hpp"
#include "ui_static_toolbar.h" // Include the header generated by uic
#include "MenuFactory.hpp" // Include for MenuType enum
#include <QMenu>
#include <QHBoxLayout>
#include <QDebug>

StaticToolbar::StaticToolbar(QWidget* parent) :
    QWidget(parent),
    ui(new Ui::toolbarContainer) // Instantiate the UI class
{
    ui->setupUi(this); // Set up the UI onto this widget instance

    // --- FIX: Ensure the menu buttons are checkable to allow toggling ---
    // This allows them to emit the toggled(bool) signal we need.
    ui->flowVisualizerMenu->setCheckable(true);
    ui->realsense_config_button->setCheckable(true);
    ui->databaseManagerButton->setCheckable(true);
    ui->gridPropertiesButton->setCheckable(true);
    // --------------------------------------------------------------------

    // Connect signals from the UI buttons to the signals of this class
    connect(ui->load_robot_button, &QToolButton::clicked, this, &StaticToolbar::loadRobotClicked); // This signal is for loading a robot model.

    // Connect the toggled signals for each menu button
    connect(ui->flowVisualizerMenu, &QToolButton::toggled, this, &StaticToolbar::flowMenuToggled); // This signal shows/hides the Flow Visualizer panel.
    connect(ui->realsense_config_button, &QToolButton::toggled, this, &StaticToolbar::realSenseMenuToggled); // This signal shows/hides the RealSense configuration panel.
    connect(ui->databaseManagerButton, &QToolButton::toggled, this, &StaticToolbar::databaseMenuToggled); // This signal shows/hides the Database management panel.
    connect(ui->gridPropertiesButton, &QToolButton::toggled, this, &StaticToolbar::gridMenuToggled); // This signal shows/hides the Grid Properties panel.

    // Create the viewport manager popup
    m_viewportManagerPopup = new ViewportManagerPopup(this);

    // Get the placeholder widget from the UI
    auto* ph = ui->ViewportManagerWidgetPlaceholder;
    auto* layout = qobject_cast<QHBoxLayout*>(ph->layout());
    if (!layout) { // If the placeholder doesn't have a layout...
        layout = new QHBoxLayout; // ...create one.
        layout->setContentsMargins(0, 0, 0, 0);
        ph->setLayout(layout); // And install it.
    }

    // Add the popup to the placeholder's layout
    layout->addWidget(m_viewportManagerPopup);
    m_viewportManagerPopup->adjustSize();
    ph->adjustSize();
}


StaticToolbar::~StaticToolbar()
{
    delete ui;
}

// This function allows MainWindow to programmatically update the button's checked state,
// for example, when a menu is closed by clicking the 'x' on its tab.
void StaticToolbar::uncheckButtonForMenu(MenuType type)
{
    QToolButton* button = nullptr;
    switch (type)
    {
    case MenuType::FlowVisualizer:
        button = ui->flowVisualizerMenu;
        break;
    case MenuType::RealSense:
        button = ui->realsense_config_button;
        break;
    case MenuType::Database:
        button = ui->databaseManagerButton;
        break;
    case MenuType::GridProperties:
        button = ui->gridPropertiesButton;
        break;
    default:
        break;
    }

    if (button && button->isChecked())
    {
        // Use a signal blocker to prevent the toggled(false) signal from re-triggering the hideMenu logic in MainWindow.
        const QSignalBlocker blocker(button);
        button->setChecked(false);
    }
}
