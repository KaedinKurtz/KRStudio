#include "StaticToolbar.hpp"
#include "ui_static_toolbar.h" // Include the header generated by uic
#include <QMenu>
#include <QHBoxLayout>

StaticToolbar::StaticToolbar(QWidget* parent) :
    QWidget(parent),
    ui(new Ui::toolbarContainer) // Instantiate the UI class
{
    ui->setupUi(this); // Set up the UI onto this widget instance

    // You can connect signals/slots for your toolbar buttons here if needed
    // For example:
    connect(ui->load_robot_button, &QToolButton::clicked, this, &StaticToolbar::loadRobotClicked); // after a line, explain what it does

    connect(ui->flowVisualizerMenu, &QToolButton::toggled,
        this, &StaticToolbar::flowMenuToggled);
    connect(ui->realsense_config_button, &QToolButton::toggled,
        this, &StaticToolbar::realSenseMenuToggled);
    connect(ui->databaseManagerButton, &QToolButton::toggled,
        this, &StaticToolbar::databaseMenuToggled);

    // 1) Create the popup and parent it to this toolbar
    m_viewportManagerPopup = new ViewportManagerPopup(this);

    // 2) Put it into the placeholder widget’s layout
    //    (in Qt Designer you should have given ViewportManagerWidgetPlaceholder a layout;
    //     if not, we’ll add one here programmatically)
    auto* ph = ui->ViewportManagerWidgetPlaceholder;

    // 1) See if the placeholder already has a layout
    auto* layout = qobject_cast<QHBoxLayout*>(ph->layout());
    if (!layout) {
        // 2) Create one *without* a QWidget* parent
        layout = new QHBoxLayout;
        layout->setContentsMargins(0, 0, 0, 0);
        // 3) Install it on `ph` so that QLayout::parentWidget() is set
        ph->setLayout(layout);
    }

    // 4) Now it's safe to add widgets to it
    layout->addWidget(m_viewportManagerPopup);
    m_viewportManagerPopup->adjustSize();
    ph->adjustSize();
}


StaticToolbar::~StaticToolbar()
{
    delete ui;
}